#!/usr/local/bin/perl

use strict;
use warnings FATAL => 'all';
use v5.12;
use ExtUtils::MakeMaker qw(prompt);
use File::Basename;
use File::Path;
use File::Spec;
use Text::Xslate;
use YAML;
use Config::Pit;
use Getopt::Long;
use autodie ':all';
use YAML::Tiny;
use Data::Dumper;
use Perl::Tidy;
use File::Zglob;
use Time::Piece;

our $VERSION = '0.03';

GetOptions(
    'xs' => \my $xs,
    'help' => \my $help,
    'upgrade' => \my $upgrade,
    'eumm' => \my $eumm,
    'v|version' => \my $version,
);
usage() if $help;
die "$0 $VERSION\n" if $version;

sub usage {
    print "Usage: $0 [--xs] Module\n";
    exit 0;
}

my $config = pit_get(
    'pmsetup',
    require => {
        author        => 'Tokuhiro Matsuno',
        email         => 'tokuhirom AAJKLFJEF@ GMAIL COM',
    }
);
die "E-mail address must contain '\@' character for Module::Build" unless $config->{email} =~ /\@/;

if ($upgrade) {
    CMD_upgrade($config);
} else {
    my $modname = shift @ARGV or usage();
       $modname =~ s/-/::/g;
    write_plugin_files($modname, $config);
}
exit;

sub slurp {
    my ($fname) = @_;
    open my $fh, '<:utf8', $fname;
    do { local $/; <$fh> };
}

sub write_file2 {
    my ($fname, $content) = @_;
    open my $fh, '>:utf8', $fname;
    print {$fh} $content;
}

sub CMD_upgrade {
    my $config = shift;

    my @templates = YAML::Load(join '', <DATA>);
    require Perl::Tidy;

    if (-f 'Makefile.PL') {
        system("perl Makefile.PL");
    }

    for my $file (qw(MANIFEST.SKIP .gitignore)) {
        my @lines = sub {
            if (-f $file) {
                open my $ifh, '<:utf8', $file;
                map { my $l = $_; $l =~ s/\n//g; $l } <$ifh>;
            } else {
                ()
            }
        }->();
        my @rules = grep !/^#!include_default$/, grep !/\[%/, split /\n/, [map { $_->{template} } grep { $_->{file} eq $file } @templates]->[0];
        unless ($eumm && $file eq 'MANIFEST.SKIP') {
            push @rules, '^inc/';
        }
        my ($metafile) = grep { -f $_ } qw(META.yml MYMETA.yml);
        if ($metafile) {
            my $meta = YAML::Tiny::Load(slurp $metafile);
            if ($file eq 'MANIFEST.SKIP') {
                push @rules, sprintf("^%s-", $meta->{name});
            } elsif ($file eq '.gitignore') {
                push @rules, sprintf("%s-*/", $meta->{name});
            } else {
                die "ABORT";
            }
        }

        open my $ofh, '>:utf8', $file;
        print {$ofh} join("\n", @lines)."\n";
        my %lines = map { $_ => 1 } @lines;
        for my $rule (@rules) {
            next if $lines{$rule};
            print {$ofh} $rule."\n";
        }
        system("git add $file");
    }

    # switch to M::B
    if (-f 'Makefile.PL' && !$eumm) {
        system('perl Makefile.PL');
        my $meta = YAML::Tiny::Load(slurp 'MYMETA.yml');
        delete $meta->{configure_requires}->{'ExtUtils::MakeMaker'};
        delete $meta->{build_requires}->{'ExtUtils::MakeMaker'};
        $meta->{configure_requires}->{'Module::Build'} = '0.38';
        $meta->{build_requires}->{'Test::More'} = '0.98';

        $meta->{license} =~ s/unknown/perl/;

        my $makefile_pl = slurp('Makefile.PL');
        my ($module_name) = ($makefile_pl =~ /all_from\s*["'](.+?)["']/);
        $module_name or die "Cannot determine module name from Makefile.PL: " . $makefile_pl;
        $module_name =~ s!^lib/!!;
        $module_name =~ s!\.pm$!!;
        $module_name =~ s!/!::!g;

        # TODO: apply perltidy
        local $Data::Dumper::Terse = 1;
        write_file2('Build.PL', Text::Xslate->new(syntax => 'TTerse', type => 'text', module => ['Data::Dumper', 'Text::Xslate::Bridge::TT2Like'])->render_string(
            <<'...', +{%$meta, module_name => $module_name}));
use strict;
use warnings FATAL => 'all';
use Module::Build::Pluggable qw(
    CPANfile
);

my $build = Module::Build->new(
    license => '[% license %]',
    recursive_test_files => 1,
    dynamic_config => 0,
    no_index => [% Dumper(no_index) -%],
    name => '[% name %]',
    module_name => '[% module_name %]',

    test_files => (-d '.git' || $ENV{RELEASE_TESTING}) ? 't/ xt/' : 't/',

    create_readme => 1,
    create_license => 1,
);
$build->create_build_script();
...

        write_file2('cpanfile', Text::Xslate->new(syntax => 'TTerse', type => 'text', module => ['Data::Dumper'])->render_string(
            <<'...', +{%$meta, module_name => $module_name}));
[% FOR k IN requires -%]
requires '[% k %]' => '[% requires[k] %]';
[% END -%]

on 'configure' => sub {
[% FOR k IN configure_requires -%]
  requires '[% k %]' => '[% configure_requires[k] %]';
[% END -%]
};

on 'build' => sub {
[% FOR k IN build_requires -%]
  requires '[% k %]' => '[% build_requires[k] %]';
[% END -%]
};

on 'test' => sub {
[% FOR k IN test_requires -%]
  requires '[% k %]' => '[% test_requires[k] %]';
[% END -%]
};

on 'develop' => sub {
[% FOR k IN develop_requires -%]
  requires '[% k %]' => '[% develop_requires[k] %]';
[% END -%]
};
...
        system("perltidy -b Build.PL");
        system("cp META.yml META.yml.bak");
        system("rm -rf inc/ Makefile");
        unlink('MANIFEST') if -f 'MANIFEST';
        system("git rm README") if -f 'README';
        system("git rm Makefile.PL");
        system("perl Build.PL");
        system("./Build manifest");
        system("./Build distmeta");
        system("git add LICENSE Build.PL");
    }

    for (zglob("lib/**/*.pm")) {
        system(qq!perl -i -pe 's{AAJKLFJEF }{AAJKLFJEF\@ }; s[\{at\}][AAJKLFJEF\@]' $_!);
    }

    for (qw(t/pod.t xt/perlcritic.t t/perlcriticrc xt/perlcriticrc xt/06_meta_author.t xt/98_perlcritic.t)) {
        system("git rm $_") if -f $_;
    }
    unlink 'xt/02_perlcritic.t' if -f 'xt/02_perlcritic.t';
    mkpath('xt');
    for (grep { $_->{file} =~ m{^xt/} } @templates) {
        next if -f $_->{file};
        write_file($_->{file}, $_->{template}, +{
            config => $config,
            module => '',
        });
    }
    system("git add xt/");

    if ($eumm) {
        system("perl Makefile.PL");
        system("make manifest");
        system("make test");
        system("make disttest");
        system("make distclean");
    } else {
        system("perl Build.PL");
        unlink('MANIFEST') if -f 'MANIFEST';
        system("./Build manifest");
        system("./Build test");
        system("./Build disttest");
        system("./Build distclean");
    }
    system("rm -f *.bak");
}

sub write_plugin_files {
    my($module, $config) = @_;

    # $module = "Foo::Bar"
    # $suffix = "Bar"
    # $dist   = "Foo-Bar"
    # $path   = "Foo/Bar.pm"
    my @pkg    = split /::/, $module;
    my $suffix = $pkg[ @pkg - 1 ];
    my $dist   = join "-", @pkg;
    my $path   = join( "/", @pkg ) . ".pm";
    (my $dir    = $dist) =~ s/^App-//;

    mkdir $dir, 0777;
    chdir $dir;

    my @template = YAML::Load(join '', <DATA>);
    my $vars = {
        module    => $module,
        dist      => $dist,
        path      => $path,
        xs        => $xs,
        config    => $config,
        localtime => scalar localtime
    };

    for my $tmpl (@template) {
        next if $tmpl->{xs} && !$xs;

        my $file = $tmpl->{file};
           $file =~ s/(\$\w+)/$1/eeg;
        write_file($file, $tmpl->{template}, $vars);
        chmod oct($tmpl->{chmod}), $file if $tmpl->{chmod};
    }

    !system "ln -s lib/$path README.pod" or die $?;

    !system "perl Build.PL" or die $?;
    !system './Build test' or die $?;
    !system './Build manifest' or die $?;
    !system './Build distmeta' or die $?;
    !system './Build distclean' or die $?;

    # initialize git repository
    !system("git init") or die $?;
    !system("git add .") or die $?;
    !system("git commit -m 'initial import'") or die $?;
}

sub write_file {
    my($path, $template, $vars) = @_;

    if (-e $path) {
        my $ans = prompt("$path exists. Override? [yN] ", 'n');
        return if $ans !~ /[Yy]/;
    }

    my $dir = File::Basename::dirname($path);
    unless (-e $dir) {
        warn "Creating directory $dir\n";
        File::Path::mkpath($dir, 1, 0777);
    }

    my $tt = Text::Xslate->new(syntax => 'TTerse');
    my $content = $tt->render_string($template, $vars);

    warn "Creating $path\n";
    open my $out, ">", $path or die "$path: $!";
    print $out $content;
    close $out;
}

=pod

original L<http://svn.bulknews.net/repos/public/misc/pmsetup>

=cut

__DATA__
---
xs: 1
file: xs/$suffix.xs
template: |
  #include "xshelper.h"

  MODULE = [% module %]    PACKAGE = [% module %]
---
xs: 1
file: Makefile.PL
template: |
  use inc::Module::Install;
  use Module::Install::XSUtil 0.36;
  use Module::Install::AuthorTests;

  name '[% dist %]';
  all_from 'lib/[% path %]';

  # requires '';
  # requires 'Exporter' => 5.63; # use Exporter 'import';
  # requires 'Plack' =>  0.9949;

  use_xshelper();
  cc_warnings;
  cc_src_paths qw(xs);

  tests 't/*.t t/*/*.t t/*/*/*.t t/*/*/*/*.t';
  test_requires 'Test::More' => 0.98; # done_testing, subtest
  # test_requires 'Test::Requires';
  author_tests('xt');
  WriteAll;
---
file: Build.PL
template: |
  use strict;
  use warnings;
  use Module::Build::Pluggable qw(
      CPANfile
      GithubMeta
  );

  my $build = Module::Build::Pluggable->new(
      license              => 'perl',
      dynamic_config       => 0,

      requires             => {
          perl => '5.008005',
      },

      no_index    => { 'directory' => [ 'inc' ] },
      name        => '[% dist %]',
      module_name => '[% module %]',

      # script_files => [''],

      test_files => (-d '.git' || $ENV{RELEASE_TESTING}) ? 't/ xt/' : 't/',
      recursive_test_files => 1,
     
      create_readme  => 1,
      create_license => 1,
  );
  $build->create_build_script();
---
file: cpanfile
template: |
  # requires 'Exporter'                      => '0';
  requires 'parent'                        => '0';
  # requires 'Plack'                         => '0.9949';

  on 'configure' => sub {
      requires 'Module::Build::Pluggable';
      requires 'Module::Build' => '0.38';
      requires 'Module::Build::Pluggable::CPANfile';
      requires 'Module::Build::Pluggable::GithubMeta';
  };

  on 'test' => sub {
      requires 'Test::More' => '0.98';
      requires 'Test::Requires' => 0;
  };

  on 'devel' => sub {
      # Dependencies for developers
  };
---
file: t/00_compile.t
template: |
  use strict;
  use Test::More;

  use_ok $_ for qw(
      [% module %]
  );

  done_testing;
---
file: xt/01_podspell.t
template: |
  use strict;
  use Test::More;
  eval q{ use Test::Spelling };
  plan skip_all => "Test::Spelling is not installed." if $@;
  add_stopwords(map { split /[\s\:\-]/ } <DATA>);
  $ENV{LANG} = 'C';
  my $spell_cmd;
  foreach my $path (split(/:/, $ENV{PATH})) {
      -x "$path/spell"  and $spell_cmd="spell", last;
      -x "$path/ispell" and $spell_cmd="ispell -l", last;
      -x "$path/aspell" and $spell_cmd="aspell list", last;
  }
  plan skip_all => "no spell/ispell/aspell" unless $spell_cmd;
  
  set_spell_cmd($spell_cmd);
  all_pod_files_spelling_ok('lib');
  __DATA__
  [% config.author %]
  [% module %]
  tokuhirom
  AAJKLFJEF
  GMAIL
  COM
  Tatsuhiko
  Miyagawa
  Kazuhiro
  Osawa
  lestrrat
  typester
  cho45
  charsbar
  coji
  clouder
  gunyarakun
  hio_d
  hirose31
  ikebe
  kan
  kazeburo
  daisuke
  maki
  TODO
  API
  URL
  URI
  db
  TTerse
  irc
  org
  CSS
  Amon
  Tokuhiro
  Matsuno
  Svn
  svn
  diff
  Gosuke
  Miyashita
  mysqldiff
  mmm
  JSON
---
file: xt/02_perlcritic.t
template: |
  use strict;
  use Test::More;
  eval q{
      use Test::Perl::Critic 1.02 -exclude => [
          'Subroutines::ProhibitSubroutinePrototypes',
          'Subroutines::ProhibitExplicitReturnUndef',
          'TestingAndDebugging::ProhibitNoStrict',
          'ControlStructures::ProhibitMutatingListFunctions',
          'InputOutput::ProhibitInteractiveTest',
      ]
  };
  plan skip_all => "Test::Perl::Critic 1.02+ is not installed." if $@;
  all_critic_ok('lib');
---
file: xt/03_pod.t
template: |
  use Test::More;
  eval "use Test::Pod 1.00";
  plan skip_all => "Test::Pod 1.00 required for testing POD" if $@;
  all_pod_files_ok();
---
file: xt/04_minimum_version.t
template: |
  use Test::More;
  eval "use Test::MinimumVersion 0.101080";
  plan skip_all => "Test::Minimumversion required for testing perl minimum version" if $@;
  all_minimum_version_from_metayml_ok();
---
file: xt/05_cpan_meta.t
template: |
  use Test::More;
  eval "use Test::CPAN::Meta";
  plan skip_all => "Test::CPAN::Meta required for testing META.yml" if $@;
  plan skip_all => "There is no META.yml" unless -f "META.yml";
  meta_yaml_ok();
---
file: xt/06_meta_author.t
template: |
  use strict;
  use Test::More;
  eval "use Parse::CPAN::Meta";
  plan skip_all => "Parse::CPAN::Meta required for testing META.yml" unless eval "use Parse::CPAN::Meta; 1;";
  plan skip_all => "There is no META.yml" unless -f "META.yml";

  my $meta = Parse::CPAN::Meta->load_file('META.yml');
  isnt($meta->{author}->[0], 'unknown', 'author info');
  cmp_ok($meta->{'build_requires'}->{'Test::More'}, '>=', '0.98');
  ok($meta->{'requires'}->{'perl'}, 'metayml_declares_perl_version');
  done_testing;
---
file: Changes
template: |
  Revision history for Perl extension [% module %]

  0.0.1 [% localtime.strftime('%Y-%m-%dT%H:%M:%S') %]
      - original version
---
file: lib/$path
template: |
  package [% module %];
  use strict;
  use warnings;
  use 5.008005;
  our $VERSION = '0.0.1';

  [% IF xs %]
  require XSLoader;
  XSLoader::load('[% module %]', $VERSION);
  [% END %]

  1;
  __END__

  =encoding utf8

  =head1 NAME

  [% module %] - ...

  =head1 SYNOPSIS

    use [% module %];

  =head1 DESCRIPTION

  [% module %] is

  B<THIS IS A DEVELOPMENT RELEASE. API MAY CHANGE WITHOUT NOTICE>.

  =head1 AUTHOR

  [% config.author %] E<lt>[% config.email %]E<gt>

  =head1 SEE ALSO

  =head1 LICENSE

  Copyright (C) [% config.author %]

  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.

  =cut
---
file: MANIFEST.SKIP
template: |
  #!include_default
  ^\.git/
  \bRCS\b
  \bCVS\b
  ^MANIFEST\.
  ^Makefile$
  ~$
  ^#
  \.old$
  ^blib/
  ^pm_to_blib
  ^MakeMaker-\d
  ^[^/]+\.gz$
  \.cvsignore
  ^t/perlcritic
  ^tools/
  \.svn/
  ^[^/]+\.yaml$
  ^\.shipit$
  \.sw[po]$
  ^Build$
  ^ppport.h$
  ^xshelper.h$
  cover_db
  nytprof
  perltidy.ERR$
  ^README.pod$
  ^README.mkdn$
  ^tags$
  ^[% dist %]-
  ^MYMETA\.
  \b_build
  ^MANIFEST\.SKIP
  \B\.gitignore
  \.bak$
  ^\.carton/
  ^carton\.lock$
  ^local/
---
file: .shipit
chmod: 0644
template: |
  steps = FindVersion, ChangeVersion, CheckChangeLog, DistTest, Commit, Tag, MakeDist, UploadCPAN
  git.push_to=origin
---
file: .travis.yml
chmod: 0644
template: |
  language: perl
  perl:
    - 5.16
    - 5.14
---
file: .gitignore
chmod: 0644
template: |
  Makefile
  inc/
  [% suffix %].c
  ppport.h
  *.sw[po]
  *.bak
  *.old
  Build
  _build/
  xshelper.h
  tags
  pm_to_blib
  blib/
  META.yml
  MYMETA.*
  META.json
  META.yml
  README
